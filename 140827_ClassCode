# Compile code at this site: http://www.compileonline.com/execute_python_online.php
#
########################################################
##### BEGIN PYTHON CODE
########################################################
import numpy as np

print "Hello World!\n";


######## MAKE ARRAYS




x = np.array([1,2,3,4,5])
print x
print " "

y = np.array([[1],[2],[3],[4],[5]])
print y
print " "

A = np.array([[1,2,3,1],[4,1,3,2],[4,4,3,1],[3,2,3,3]])
print A
print " "

print A[0,3]
print " "

A[2,3] = 0

print A[2,3]
print " "

z = np.array([1,1,3,1])
print z
print " "

######## APPEND AND TRANSPOSE MATRICES

B = np.vstack((z,A))

print B
print " "

print z
print zip(z.T)

B = np.hstack((zip(z.T),A))

print B
print " "

######## SELECTING SUBSETS OF ARRAYS

B = np.vstack((z,A))

print B
print " "
print B[0:4,]
print " "
print B[:,0:4]
print " "
print B.shape
print " "
print np.delete(B,1,0).shape
print " "
print np.delete(B,1,1).shape



########################################################
##### END PYTHON CODE
########################################################

########################################################
##### BEGIN MATLAB CODE
########################################################
%entering a row vector
x=[1 2 3 4 5]
%
%x =
%
%     1     2     3     4     5
%
%entering a column vector - note the use of the semi-colon
y=[1;2;3;1;1]
%
%y =
%
%     1
%     2
%     3
%     1
%     1
%entering a matrix - we can do this row-wise
A=[1 2 3 1; 4 1 3 2; 4 4 3 1; 3 2 3 3]
%
%A =
%
%     1     2     3     1
%     4     1     3     2
%     4     4     3     1
%     3     2     3     3
%
%THE FOLLOWING COMMANDS ILLUSTRATE EDITING A MATRIX
%changing an element
A(2,3)=0
%
%A =
%
%    1     2     3     1
%    4     1     0     2
%    4     4     3     1
%    3     2     3     3
%
%note that A(2,3) has been changed from 3 to 0
% adding a row to a matrix
%first an example of what will not work
%B=[A;x]
%??? Error using ==> vertcat
%All rows in the bracketed expression must have the same 
%number of columns.
%
%we could not add x to the matrix because it has 5 elements
%whereas each row of A has 4 elements
%MATLAB only performs valid operations on matrices
%so define a new row matrix of length 4
z=[1 1 3 1]
%
%z =
%
%     1     1     3     1
%
B=[A;z]
%this will work fine
%B =
%
%     1     2     3     1
%     4     1     0     2
%     4     4     3     1
%     3     2     3     3
%     1     1     3     1
%B now is a 5x4 martix.  Let us try to append a column to this matrix
C=[B y]
%
%C =
%
%     1     2     3     1     1
%     4     1     0     2     2
%     4     4     3     1     3
%     3     2     3     3     1
%     1     1     3     1     1
%
%C is now a 5x5 martix, we were able to append the column y to B ...
%because it had the right number of elements (i.e. 5)
%Now let us delete portions of the matrix C
C(:,5)=[]
%
%C =
%
%     1     2     3     1
%     4     1     0     2
%     4     4     3     1
%     3     2     3     3
%     1     1     3     1
%
%the above command deleted the fifth column of C
%now delete the fifth row of the modified C
%first, with an error that I will comment out
%C(5;:)=[]
%??? C(5;:)=[]
%       |
%Error: ")" expected, ";" found.
%
C(5,:)=[]
%
%C =
%
%     1     2     3     1
%     4     1     0     2
%     4     4     3     1
%     3     2     3     3
%
%so we now have a 4x4 matrix again.
%now let us delete the second and third rows of C
C(2:3,:)=[]
%
%C =
%
%     1     2     3     1
%     3     2     3     3
%
%this leaves us a 2x4 matrix, with the first and fourth rows of
%the previously retained C
%let us recall the matrix A
A
%
%A =
%
%     1     2     3     1
%     4     1     0     2
%     4     4     3     1
%     3     2     3     3
%
%can I do A(2:3,1:2)=[]? Matlab does not allow this
%A(2:3,1:2)=[]
%???  Indexed empty matrix assignment is not allowed.
%
%
##################################################################
########### GOT TO HERE
##################################################################
%NOW LET US DO SOME MATRIX OPERATIONS
%define a matrix B, also 4x4
B=[1 1 2 1; 1 3 1 1; 2 4 5 1; 1 3 4 2]
%
%B =
%
%     1     1     2     1
%     1     3     1     1
%     2     4     5     1
%     1     3     4     2
%
% A+B does matrix addition, A-B matrix subtraction
A+B
%
%ans =
%
%     2     3     5     2
%     5     4     1     3
%     6     8     8     2
%     4     5     7     5
%
%A-B
%
%ans =
%
%     0     1     1     0
%     3    -2    -1     1
%     2     0    -2     0
%     2    -1    -1     1
%
%matrix multiplication is A*B
A*B
%
%ans =
%
%    10    22    23     8
%     7    13    17     9
%    15    31    31    13
%    14    30    35    14
%
%note that 10 = 1*1+2*1+3*2+1*1, etc. - recall how matrix multiplication
%works
%An alternative form of multiplcation that Matlab allows for matrices
%is term-by-term - this command is A.*B (dot-star)
A.*B
%
%ans =
%
%     1     2     6     1
%     4     3     0     2
%     8    16    15     1
%     3     6    12     6
%
%note that B*A is not the same as A*B, but A.*B=B.*A
B*A
%
%ans =
%
%    16    13    12     8
%    20    11     9    11
%    41    30    24    18
%    35    25    21    17
%
B.*A
%
%ans =
%
%     1     2     6     1
%     4     3     0     2
%     8    16    15     1
%     3     6    12     6
%
%matrix division - A/B is A*inv(B), inv for inverse
%A\B is inv(A)*B
A/B
%
%ans =
%
%    0.2000   -0.1000    0.3000    0.3000
%    6.2000    1.9000   -0.7000   -2.7000
%    3.2000    1.4000    0.8000   -2.2000
%    4.2000    0.9000   -0.7000   -0.7000
%
A*inv(B)
%
%ans =
%
%    0.2000   -0.1000    0.3000    0.3000
%    6.2000    1.9000   -0.7000   -2.7000
%    3.2000    1.4000    0.8000   -2.2000
%    4.2000    0.9000   -0.7000   -0.7000
%
A\B
%
%ans =
%
%    1.0000   -1.0000   -5.0000         0
%   -1.0000    3.0000    9.0000   -0.0000
%    1.0000   -2.0000   -5.6667    0.1667
%   -1.0000    2.0000    6.0000    0.5000
%
inv(A)*B
%
%ans =
%
%    1.0000   -1.0000   -5.0000   -0.0000
%   -1.0000    3.0000    9.0000         0
%    1.0000   -2.0000   -5.6667    0.1667
%   -1.0000    2.0000    6.0000    0.5000
%
%you can also do term-by-term division with ./ and .\
A./B
%
%ans =
%
%    1.0000    2.0000    1.5000    1.0000
%    4.0000    0.3333         0    2.0000
%    2.0000    1.0000    0.6000    1.0000
%    3.0000    0.6667    0.7500    1.5000
%
A.\B
%Warning: Divide by zero.
%
%ans =
%
%    1.0000    0.5000    0.6667    1.0000
%    0.2500    3.0000       Inf    0.5000
%    0.5000    1.0000    1.6667    1.0000
%    0.3333    1.5000    1.3333    0.6667
%
%note the "Inf" because of the divide by zero.
%
%
%as noted above inv(A) denotes the inverse of A, and only
%works for square matrices
%
%another useful matrix operation - transpose is simply A'
A'
%
%ans =
%
%     1     4     4     3
%     2     1     4     2
%     3     0     3     3
%     1     2     1     3
%
%transpose changes rows to columns
%
%some other useful operations - tril extracts the lower-triangular
%part of a matrix, triu extracts the upper triangular part, fliplr
%flipd the matrix left-right, and flipud flips up-down
tril(A)
%
%ans =
%
%     1     0     0     0
%     4     1     0     0
%     4     4     3     0
%     3     2     3     3
%
triu(A)
%
%ans =
%
%     1     2     3     1
%     0     1     0     2
%     0     0     3     1
%     0     0     0     3
%
%some useful utility commands related to matrices
%eye(m,n) creates an identity matrix of dimensions mxn
%and eye(m) creates a square matrix of size mxm
eye(5)
%
%ans =
%
%     1     0     0     0     0
%     0     1     0     0     0
%     0     0     1     0     0
%     0     0     0     1     0
%     0     0     0     0     1
%
eye(2,3)
%
%ans =
%
%     1     0     0
%     0     1     0
%
%zeros(m,n) zeros(m) ones(m,n) and ones(m) similarly
zeros(2,3)
%
%ans =
%
%     0     0     0
%     0     0     0
%
zeros(2)
%
%ans =
%
%     0     0
%     0     0
%
ones(2,5)
%
%ans =
%
%     1     1     1     1     1
%     1     1     1     1     1
%
ones(2,1)
%
%ans =
%
%     1
%     1
%
%using the above commands with n=1 is a good way of getting a vector
%
%another useful command - diag
%when A is a matrix, diag(A) extracts the diagonal of A as a vector.
%diag(A,k) extracts the kth off-diagonal of A (k can be + or -)
diag(A)
%
%ans =
%
%     1
%     1
%     3
%     3
%
diag(A,1)
%
%ans =
%
%     2
%     0
%     1
%
diag(A,-1)
%
%ans =
%
%     4
%     4
%     3
%
%let us try to create a tridiaginal matrix with 1's on the main
%diagonal, 0.5's on the lower off-diagonal and 0.2's on the upper
%off-diagonal
%
%for this we will use the diag command applied to vectors.  As
%long as dimensions are compatible, diag(x) puts the vector x on
%the diagonal of a matrix, diag(x,k) puts x on the kth off-diagonal
%of a matrix
%
f=ones(6,1)
%
%f =
%
%     1
%     1
%     1
%     1
%     1
%     1
%
g=0.5*ones(5,1)
%
%g =
%
%    0.5000
%    0.5000
%    0.5000
%    0.5000
%    0.5000
%
h=0.2*ones(5,1)
%
%h =
%
%    0.2000
%    0.2000
%    0.2000
%    0.2000
%    0.2000
%
diag(f)+diag(g,-1)+diag(h,1)
%
%ans =
%
%    1.0000    0.2000         0         0         0         0
%    0.5000    1.0000    0.2000         0         0         0
%         0    0.5000    1.0000    0.2000         0         0
%         0         0    0.5000    1.0000    0.2000         0
%         0         0         0    0.5000    1.0000    0.2000
%         0         0         0         0    0.5000    1.0000
%
%Here we used the diag command operating on vectors to create a 
%tridiagonal matrix
%
%HOW DO YOU MULTIPLY A MATRIX WITH A SCALAR QUANTITY?
%will 0.5*A work?
0.5*A
%
%ans =
%
%    0.5000    1.0000    1.5000    0.5000
%    2.0000    0.5000         0    1.0000
%    2.0000    2.0000    1.5000    0.5000
%    1.5000    1.0000    1.5000    1.5000
%
%YES!  
%but 0.5/A will not work
%0.5/A
%??? Error using ==> /
%Matrix dimensions must agree.
%
% let us try 0.5*inv(A)
0.5*inv(A)
%
%ans =
%
%    1.5000    1.0000   -0.5000   -1.0000
%   -2.5000   -1.5000    1.0000    1.5000
%    1.9167    1.0000   -0.6667   -1.0833
%   -1.7500   -1.0000    0.5000    1.2500
%
%YES, that works - MATLAB allows scalar multiplcation
%let us try a few more things......
0.5.*A
%
%ans =
%
%    0.5000    1.0000    1.5000    0.5000
%    2.0000    0.5000         0    1.0000
%    2.0000    2.0000    1.5000    0.5000
%    1.5000    1.0000    1.5000    1.5000
%
%works - term-by term multiplication with  scalar
0.5./A
%Warning: Divide by zero.
%
%ans =
%
%    0.5000    0.2500    0.1667    0.5000
%    0.1250    0.5000       Inf    0.2500
%    0.1250    0.1250    0.1667    0.5000
%    0.1667    0.2500    0.1667    0.1667
%
%works - each element of A, A(i,j) is replaced by 0.5/A(i,j)
%note that this is not the same as 0.5*inv(A)
%
%now we will look at a few other useful commands for creating vectors
%vector=InitialValue:Increment:FinalValue
%
vec1=0:0.05:1
%
%vec1 =
%
%  Columns 1 through 9 
%
%         0    0.0500    0.1000    0.1500    0.2000    0.2500    0.3000    0.3500    0.4000
%
%  Columns 10 through 18 
%
%    0.4500    0.5000    0.5500    0.6000    0.6500    0.7000    0.7500    0.8000    0.8500
%
%  Columns 19 through 21 
%
%    0.9000    0.9500    1.0000
%
%vector=linspace(InitialValue,FinalValue,Length)
%
vec2=linspace(0,1,21)
%
%  Columns 1 through 9 
%
%         0    0.0500    0.1000    0.1500    0.2000    0.2500    0.3000    0.3500    0.4000
%
%  Columns 10 through 18 
%
%    0.4500    0.5000    0.5500    0.6000    0.6500    0.7000    0.7500    0.8000    0.8500
%
%  Columns 19 through 21 
%
%    0.9000    0.9500    1.0000
%
%vector=logspace(log(InitialValue),log(FinalValue),Length)
%
vec3=logspace(-3,1,5)
%
%vec3 =
%
%    0.0010    0.0100    0.1000    1.0000   10.0000
%
%some useful commands to extract matrix/vector dimensions
%size - size of a matrix, length - length of a vector
size(A)
%ans =
%
%     4     4
length (vec1)
%ans =
%
%    21

########################################################
##### END MATLAB CODE
########################################################
